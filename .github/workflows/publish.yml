name: Build and Publish

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Add manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      force:
        description: 'Force publish even if version exists'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        architecture: [x64]
        include:
          # Add Windows 32-bit builds
          - os: windows-latest
            python-version: '3.8'
            architecture: x86
          - os: windows-latest
            python-version: '3.9'
            architecture: x86
          - os: windows-latest
            python-version: '3.10'
            architecture: x86
          - os: windows-latest
            python-version: '3.11'
            architecture: x86
          - os: windows-latest
            python-version: '3.12'
            architecture: x86

    steps:
      - uses: actions/checkout@v4

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install gettext
          brew link gettext --force
          echo "LDFLAGS=-L/usr/local/opt/gettext/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/opt/gettext/include" >> $GITHUB_ENV
          echo "/usr/local/opt/gettext/bin" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: i686-pc-windows-msvc  # Add 32-bit Windows target

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools setuptools-rust cffi

      - name: Build wheels
        run: |
          pip install cffi  # Ensure CFFI is available during build
          # Build platform-specific wheel
          python -m build --wheel

      - name: Store wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
          path: |
            dist/*.whl
            !dist/*-none-any.whl  # Exclude pure Python wheels

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Move wheels to dist
        run: |
          mkdir -p dist_final
          find dist -type f -name "*.whl" ! -name "*none-any.whl" -exec mv {} dist_final/ \;
          
          echo "Contents of dist_final:"
          ls -la dist_final/

      - name: Install twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Checking files with twine..."
          twine check dist_final/*
          
          echo "Files to be uploaded:"
          for file in dist_final/*; do
            echo "  - $(basename $file)"
          done
          
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "Force publishing..."
            python -m twine upload --skip-existing dist_final/*
          else
            echo "Normal publishing..."
            python -m twine upload dist_final/*
          fi

  create_release:
    needs: publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          generate_release_notes: true 