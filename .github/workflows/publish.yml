name: Build and Publish

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Add manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      force:
        description: 'Force publish even if version exists'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # # Windows builds (32 and 64 bit)
          # - os: windows-latest
          #   python-version: '3.8'
          #   architecture: x64
          #   rust-target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.9'
          #   architecture: x64
          #   rust-target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.10'
          #   architecture: x64
          #   rust-target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.11'
          #   architecture: x64
          #   rust-target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.12'
          #   architecture: x64
          #   rust-target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.8'
          #   architecture: x86
          #   rust-target: i686-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.9'
          #   architecture: x86
          #   rust-target: i686-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.10'
          #   architecture: x86
          #   rust-target: i686-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.11'
          #   architecture: x86
          #   rust-target: i686-pc-windows-msvc
          # - os: windows-latest
          #   python-version: '3.12'
          #   architecture: x86
          #   rust-target: i686-pc-windows-msvc
          # macOS builds
          # - os: macos-latest
          #   python-version: '3.8'
          #   architecture: x64
          #   rust-target: x86_64-apple-darwin
          # - os: macos-latest
          #   python-version: '3.9'
          #   architecture: x64
          #   rust-target: x86_64-apple-darwin
          # - os: macos-latest
          #   python-version: '3.10'
          #   architecture: x64
          #   rust-target: x86_64-apple-darwin
          # - os: macos-latest
          #   python-version: '3.11'
          #   architecture: x64
          #   rust-target: x86_64-apple-darwin
          # - os: macos-latest
          #   python-version: '3.12'
          #   architecture: x64
          #   rust-target: x86_64-apple-darwin
          # Linux builds
          - os: ubuntu-latest
            python-version: '3.8'
            architecture: x64
            rust-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: '3.9'
            architecture: x64
            rust-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: '3.10'
            architecture: x64
            rust-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: '3.11'
            architecture: x64
            rust-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: '3.12'
            architecture: x64
            rust-target: x86_64-unknown-linux-gnu

    steps:
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          # Uninstall existing gettext to avoid architecture mismatch
          brew uninstall gettext || true
          
          # Force x86_64 architecture for Intel Mac runners
          arch_name="$(uname -m)"
          if [ "${arch_name}" = "x86_64" ]; then
              # Running on Intel
              echo "Running on Intel (x86_64)"
              HOMEBREW_PATH="/usr/local"
          else
              # Running on Apple Silicon but need x86_64
              echo "Running on ${arch_name}, forcing x86_64"
              HOMEBREW_PATH="/usr/local"
              export ARCHFLAGS="-arch x86_64"
              export SYSTEM_VERSION_COMPAT=1
          fi
          
          # Install gettext with the correct architecture
          arch -x86_64 brew install gettext
          arch -x86_64 brew link gettext --force
          
          # Set up paths for x86_64 installation
          GETTEXT_PATH="${HOMEBREW_PATH}/opt/gettext"
          
          # Create symlinks if needed
          sudo mkdir -p /usr/local/opt/gettext/lib || true
          sudo ln -sf ${GETTEXT_PATH}/lib/libintl*.dylib /usr/local/opt/gettext/lib/ || true
          
          # Export library path for dyld
          echo "DYLD_LIBRARY_PATH=${GETTEXT_PATH}/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L${GETTEXT_PATH}/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${GETTEXT_PATH}/include" >> $GITHUB_ENV
          echo "${GETTEXT_PATH}/bin" >> $GITHUB_PATH
          echo "ARCHFLAGS=-arch x86_64" >> $GITHUB_ENV
          
          # Verify installation and symlinks
          echo "Checking gettext installation:"
          ls -la ${GETTEXT_PATH}/lib/libintl*.dylib || true
          ls -la /usr/local/opt/gettext/lib/libintl*.dylib || true
          file ${GETTEXT_PATH}/lib/libintl*.dylib || true
          arch -x86_64 brew list gettext || true
          echo "GETTEXT_PATH: ${GETTEXT_PATH}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools setuptools-rust cffi

      - name: Build Rust Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cd roll_regression/rust
          cargo build --release --target ${{ matrix.rust-target }}
          cd ../..
          New-Item -ItemType Directory -Force -Path "roll_regression"
          Copy-Item -Force "roll_regression/rust/target/${{ matrix.rust-target }}/release/*.dll" -Destination "roll_regression/"
          echo "Contents of roll_regression directory:"
          Get-ChildItem roll_regression

      - name: Build Rust Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd roll_regression/rust
          cargo build --release --target ${{ matrix.rust-target }}
          cd ../..
          mkdir -p roll_regression
          if [ "${{ runner.os }}" = "macOS" ]; then
            cp roll_regression/rust/target/${{ matrix.rust-target }}/release/*.dylib roll_regression/
          else
            cp roll_regression/rust/target/${{ matrix.rust-target }}/release/*.so roll_regression/
          fi
          echo "Contents of roll_regression directory:"
          ls -la roll_regression

      - name: Build wheels
        env:
          CARGO_TARGET_DIR: "./target"
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          python setup.py bdist_wheel

      - name: Store wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
          path: |
            dist/*.whl
            !dist/*-none-any.whl

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Move wheels to dist
        run: |
          mkdir -p dist_final || true
          find dist -type f -name "*.whl" ! -name "*none-any.whl" -exec mv {} dist_final/ \;
          
          echo "Contents of dist_final:"
          ls -la dist_final/

      - name: Install twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Checking files with twine..."
          twine check dist_final/*

          echo "Files to be uploaded:"
          for file in dist_final/*; do
            echo "  - $(basename $file)"
          done
          
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "Force publishing..."
            python -m twine upload --skip-existing dist_final/*
          else
            echo "Normal publishing..."
            python -m twine upload dist_final/*
          fi

  create_release:
    needs: publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          generate_release_notes: true 